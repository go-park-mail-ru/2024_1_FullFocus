// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_1_FullFocus/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// GetUserIDBySessionID mocks base method.
func (m *MockAuth) GetUserIDBySessionID(ctx context.Context, sID string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDBySessionID", ctx, sID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDBySessionID indicates an expected call of GetUserIDBySessionID.
func (mr *MockAuthMockRecorder) GetUserIDBySessionID(ctx, sID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDBySessionID", reflect.TypeOf((*MockAuth)(nil).GetUserIDBySessionID), ctx, sID)
}

// IsLoggedIn mocks base method.
func (m *MockAuth) IsLoggedIn(ctx context.Context, isID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoggedIn", ctx, isID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLoggedIn indicates an expected call of IsLoggedIn.
func (mr *MockAuthMockRecorder) IsLoggedIn(ctx, isID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoggedIn", reflect.TypeOf((*MockAuth)(nil).IsLoggedIn), ctx, isID)
}

// Login mocks base method.
func (m *MockAuth) Login(ctx context.Context, login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthMockRecorder) Login(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuth)(nil).Login), ctx, login, password)
}

// Logout mocks base method.
func (m *MockAuth) Logout(ctx context.Context, sID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, sID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthMockRecorder) Logout(ctx, sID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuth)(nil).Logout), ctx, sID)
}

// Signup mocks base method.
func (m *MockAuth) Signup(ctx context.Context, login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", ctx, login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockAuthMockRecorder) Signup(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockAuth)(nil).Signup), ctx, login, password)
}

// UpdatePassword mocks base method.
func (m *MockAuth) UpdatePassword(ctx context.Context, userID uint, password, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, userID, password, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockAuthMockRecorder) UpdatePassword(ctx, userID, password, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockAuth)(nil).UpdatePassword), ctx, userID, password, newPassword)
}

// MockProducts is a mock of Products interface.
type MockProducts struct {
	ctrl     *gomock.Controller
	recorder *MockProductsMockRecorder
}

// MockProductsMockRecorder is the mock recorder for MockProducts.
type MockProductsMockRecorder struct {
	mock *MockProducts
}

// NewMockProducts creates a new mock instance.
func NewMockProducts(ctrl *gomock.Controller) *MockProducts {
	mock := &MockProducts{ctrl: ctrl}
	mock.recorder = &MockProductsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducts) EXPECT() *MockProductsMockRecorder {
	return m.recorder
}

// GetAllProductCards mocks base method.
func (m *MockProducts) GetAllProductCards(ctx context.Context, input models.GetAllProductsInput) ([]models.ProductCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductCards", ctx, input)
	ret0, _ := ret[0].([]models.ProductCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductCards indicates an expected call of GetAllProductCards.
func (mr *MockProductsMockRecorder) GetAllProductCards(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductCards", reflect.TypeOf((*MockProducts)(nil).GetAllProductCards), ctx, input)
}

// GetProductByID mocks base method.
func (m *MockProducts) GetProductByID(ctx context.Context, profileID, productID uint) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, profileID, productID)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductsMockRecorder) GetProductByID(ctx, profileID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProducts)(nil).GetProductByID), ctx, profileID, productID)
}

// GetProductsByCategoryID mocks base method.
func (m *MockProducts) GetProductsByCategoryID(ctx context.Context, input models.GetProductsByCategoryIDInput) (models.GetProductsByCategoryIDPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByCategoryID", ctx, input)
	ret0, _ := ret[0].(models.GetProductsByCategoryIDPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByCategoryID indicates an expected call of GetProductsByCategoryID.
func (mr *MockProductsMockRecorder) GetProductsByCategoryID(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByCategoryID", reflect.TypeOf((*MockProducts)(nil).GetProductsByCategoryID), ctx, input)
}

// GetProductsByQuery mocks base method.
func (m *MockProducts) GetProductsByQuery(ctx context.Context, input models.GetProductsByQueryInput) ([]models.ProductCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByQuery", ctx, input)
	ret0, _ := ret[0].([]models.ProductCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByQuery indicates an expected call of GetProductsByQuery.
func (mr *MockProductsMockRecorder) GetProductsByQuery(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByQuery", reflect.TypeOf((*MockProducts)(nil).GetProductsByQuery), ctx, input)
}

// MockAvatars is a mock of Avatars interface.
type MockAvatars struct {
	ctrl     *gomock.Controller
	recorder *MockAvatarsMockRecorder
}

// MockAvatarsMockRecorder is the mock recorder for MockAvatars.
type MockAvatarsMockRecorder struct {
	mock *MockAvatars
}

// NewMockAvatars creates a new mock instance.
func NewMockAvatars(ctrl *gomock.Controller) *MockAvatars {
	mock := &MockAvatars{ctrl: ctrl}
	mock.recorder = &MockAvatarsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvatars) EXPECT() *MockAvatarsMockRecorder {
	return m.recorder
}

// DeleteAvatar mocks base method.
func (m *MockAvatars) DeleteAvatar(ctx context.Context, uID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAvatar", ctx, uID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAvatar indicates an expected call of DeleteAvatar.
func (mr *MockAvatarsMockRecorder) DeleteAvatar(ctx, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAvatar", reflect.TypeOf((*MockAvatars)(nil).DeleteAvatar), ctx, uID)
}

// GetAvatar mocks base method.
func (m *MockAvatars) GetAvatar(ctx context.Context, profileID uint) (models.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", ctx, profileID)
	ret0, _ := ret[0].(models.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockAvatarsMockRecorder) GetAvatar(ctx, profileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockAvatars)(nil).GetAvatar), ctx, profileID)
}

// UploadAvatar mocks base method.
func (m *MockAvatars) UploadAvatar(ctx context.Context, profileID uint, img models.Avatar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", ctx, profileID, img)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockAvatarsMockRecorder) UploadAvatar(ctx, profileID, img interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockAvatars)(nil).UploadAvatar), ctx, profileID, img)
}

// MockOrders is a mock of Orders interface.
type MockOrders struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersMockRecorder
}

// MockOrdersMockRecorder is the mock recorder for MockOrders.
type MockOrdersMockRecorder struct {
	mock *MockOrders
}

// NewMockOrders creates a new mock instance.
func NewMockOrders(ctrl *gomock.Controller) *MockOrders {
	mock := &MockOrders{ctrl: ctrl}
	mock.recorder = &MockOrdersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrders) EXPECT() *MockOrdersMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrders) Create(ctx context.Context, input models.CreateOrderInput) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrdersMockRecorder) Create(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrders)(nil).Create), ctx, input)
}

// Delete mocks base method.
func (m *MockOrders) Delete(ctx context.Context, profileID, orderingID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, profileID, orderingID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrdersMockRecorder) Delete(ctx, profileID, orderingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrders)(nil).Delete), ctx, profileID, orderingID)
}

// GetAllOrders mocks base method.
func (m *MockOrders) GetAllOrders(ctx context.Context, profileID uint) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", ctx, profileID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrdersMockRecorder) GetAllOrders(ctx, profileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrders)(nil).GetAllOrders), ctx, profileID)
}

// GetOrderByID mocks base method.
func (m *MockOrders) GetOrderByID(ctx context.Context, profileID, orderingID uint) (models.GetOrderPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, profileID, orderingID)
	ret0, _ := ret[0].(models.GetOrderPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrdersMockRecorder) GetOrderByID(ctx, profileID, orderingID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrders)(nil).GetOrderByID), ctx, profileID, orderingID)
}

// MockProfiles is a mock of Profiles interface.
type MockProfiles struct {
	ctrl     *gomock.Controller
	recorder *MockProfilesMockRecorder
}

// MockProfilesMockRecorder is the mock recorder for MockProfiles.
type MockProfilesMockRecorder struct {
	mock *MockProfiles
}

// NewMockProfiles creates a new mock instance.
func NewMockProfiles(ctrl *gomock.Controller) *MockProfiles {
	mock := &MockProfiles{ctrl: ctrl}
	mock.recorder = &MockProfilesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfiles) EXPECT() *MockProfilesMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockProfiles) CreateProfile(ctx context.Context, profile models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", ctx, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfilesMockRecorder) CreateProfile(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfiles)(nil).CreateProfile), ctx, profile)
}

// GetProfile mocks base method.
func (m *MockProfiles) GetProfile(ctx context.Context, uID uint) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, uID)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockProfilesMockRecorder) GetProfile(ctx, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockProfiles)(nil).GetProfile), ctx, uID)
}

// UpdateProfile mocks base method.
func (m *MockProfiles) UpdateProfile(ctx context.Context, uID uint, newProfile models.ProfileUpdateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, uID, newProfile)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockProfilesMockRecorder) UpdateProfile(ctx, uID, newProfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfiles)(nil).UpdateProfile), ctx, uID, newProfile)
}

// MockCarts is a mock of Carts interface.
type MockCarts struct {
	ctrl     *gomock.Controller
	recorder *MockCartsMockRecorder
}

// MockCartsMockRecorder is the mock recorder for MockCarts.
type MockCartsMockRecorder struct {
	mock *MockCarts
}

// NewMockCarts creates a new mock instance.
func NewMockCarts(ctrl *gomock.Controller) *MockCarts {
	mock := &MockCarts{ctrl: ctrl}
	mock.recorder = &MockCartsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarts) EXPECT() *MockCartsMockRecorder {
	return m.recorder
}

// DeleteAllCartItems mocks base method.
func (m *MockCarts) DeleteAllCartItems(ctx context.Context, uID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllCartItems", ctx, uID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllCartItems indicates an expected call of DeleteAllCartItems.
func (mr *MockCartsMockRecorder) DeleteAllCartItems(ctx, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCartItems", reflect.TypeOf((*MockCarts)(nil).DeleteAllCartItems), ctx, uID)
}

// DeleteCartItem mocks base method.
func (m *MockCarts) DeleteCartItem(ctx context.Context, uID, prID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartItem", ctx, uID, prID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCartItem indicates an expected call of DeleteCartItem.
func (mr *MockCartsMockRecorder) DeleteCartItem(ctx, uID, prID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartItem", reflect.TypeOf((*MockCarts)(nil).DeleteCartItem), ctx, uID, prID)
}

// GetAllCartItems mocks base method.
func (m *MockCarts) GetAllCartItems(ctx context.Context, uID uint) (models.CartContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCartItems", ctx, uID)
	ret0, _ := ret[0].(models.CartContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCartItems indicates an expected call of GetAllCartItems.
func (mr *MockCartsMockRecorder) GetAllCartItems(ctx, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCartItems", reflect.TypeOf((*MockCarts)(nil).GetAllCartItems), ctx, uID)
}

// UpdateCartItem mocks base method.
func (m *MockCarts) UpdateCartItem(ctx context.Context, uID, prID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartItem", ctx, uID, prID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCartItem indicates an expected call of UpdateCartItem.
func (mr *MockCartsMockRecorder) UpdateCartItem(ctx, uID, prID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartItem", reflect.TypeOf((*MockCarts)(nil).UpdateCartItem), ctx, uID, prID)
}

// MockCategories is a mock of Categories interface.
type MockCategories struct {
	ctrl     *gomock.Controller
	recorder *MockCategoriesMockRecorder
}

// MockCategoriesMockRecorder is the mock recorder for MockCategories.
type MockCategoriesMockRecorder struct {
	mock *MockCategories
}

// NewMockCategories creates a new mock instance.
func NewMockCategories(ctrl *gomock.Controller) *MockCategories {
	mock := &MockCategories{ctrl: ctrl}
	mock.recorder = &MockCategoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategories) EXPECT() *MockCategoriesMockRecorder {
	return m.recorder
}

// GetAllCategories mocks base method.
func (m *MockCategories) GetAllCategories(ctx context.Context) ([]models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockCategoriesMockRecorder) GetAllCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockCategories)(nil).GetAllCategories), ctx)
}

// MockReviews is a mock of Reviews interface.
type MockReviews struct {
	ctrl     *gomock.Controller
	recorder *MockReviewsMockRecorder
}

// MockReviewsMockRecorder is the mock recorder for MockReviews.
type MockReviewsMockRecorder struct {
	mock *MockReviews
}

// NewMockReviews creates a new mock instance.
func NewMockReviews(ctrl *gomock.Controller) *MockReviews {
	mock := &MockReviews{ctrl: ctrl}
	mock.recorder = &MockReviewsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviews) EXPECT() *MockReviewsMockRecorder {
	return m.recorder
}

// CreateProductReview mocks base method.
func (m *MockReviews) CreateProductReview(ctx context.Context, uID uint, input models.ProductReview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductReview", ctx, uID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProductReview indicates an expected call of CreateProductReview.
func (mr *MockReviewsMockRecorder) CreateProductReview(ctx, uID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductReview", reflect.TypeOf((*MockReviews)(nil).CreateProductReview), ctx, uID, input)
}

// GetProductReviews mocks base method.
func (m *MockReviews) GetProductReviews(ctx context.Context, input models.GetProductReviewsInput) ([]models.ProductReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductReviews", ctx, input)
	ret0, _ := ret[0].([]models.ProductReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductReviews indicates an expected call of GetProductReviews.
func (mr *MockReviewsMockRecorder) GetProductReviews(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductReviews", reflect.TypeOf((*MockReviews)(nil).GetProductReviews), ctx, input)
}

// MockSuggests is a mock of Suggests interface.
type MockSuggests struct {
	ctrl     *gomock.Controller
	recorder *MockSuggestsMockRecorder
}

// MockSuggestsMockRecorder is the mock recorder for MockSuggests.
type MockSuggestsMockRecorder struct {
	mock *MockSuggests
}

// NewMockSuggests creates a new mock instance.
func NewMockSuggests(ctrl *gomock.Controller) *MockSuggests {
	mock := &MockSuggests{ctrl: ctrl}
	mock.recorder = &MockSuggestsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuggests) EXPECT() *MockSuggestsMockRecorder {
	return m.recorder
}

// GetSuggestions mocks base method.
func (m *MockSuggests) GetSuggestions(ctx context.Context, query string) (models.Suggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuggestions", ctx, query)
	ret0, _ := ret[0].(models.Suggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestions indicates an expected call of GetSuggestions.
func (mr *MockSuggestsMockRecorder) GetSuggestions(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestions", reflect.TypeOf((*MockSuggests)(nil).GetSuggestions), ctx, query)
}
