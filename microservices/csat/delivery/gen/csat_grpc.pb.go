// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: csat.proto

package gen

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CSAT_GetPolls_FullMethodName       = "/auth.CSAT/GetPolls"
	CSAT_CreatePollRate_FullMethodName = "/auth.CSAT/CreatePollRate"
)

// CSATClient is the client API for CSAT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSATClient interface {
	GetPolls(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPollsResponse, error)
	CreatePollRate(ctx context.Context, in *CreatePollRateRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cSATClient struct {
	cc grpc.ClientConnInterface
}

func NewCSATClient(cc grpc.ClientConnInterface) CSATClient {
	return &cSATClient{cc}
}

func (c *cSATClient) GetPolls(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPollsResponse, error) {
	out := new(GetPollsResponse)
	err := c.cc.Invoke(ctx, CSAT_GetPolls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSATClient) CreatePollRate(ctx context.Context, in *CreatePollRateRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CSAT_CreatePollRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSATServer is the server API for CSAT service.
// All implementations must embed UnimplementedCSATServer
// for forward compatibility
type CSATServer interface {
	GetPolls(context.Context, *empty.Empty) (*GetPollsResponse, error)
	CreatePollRate(context.Context, *CreatePollRateRequest) (*empty.Empty, error)
	mustEmbedUnimplementedCSATServer()
}

// UnimplementedCSATServer must be embedded to have forward compatible implementations.
type UnimplementedCSATServer struct {
}

func (UnimplementedCSATServer) GetPolls(context.Context, *empty.Empty) (*GetPollsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolls not implemented")
}
func (UnimplementedCSATServer) CreatePollRate(context.Context, *CreatePollRateRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePollRate not implemented")
}
func (UnimplementedCSATServer) mustEmbedUnimplementedCSATServer() {}

// UnsafeCSATServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSATServer will
// result in compilation errors.
type UnsafeCSATServer interface {
	mustEmbedUnimplementedCSATServer()
}

func RegisterCSATServer(s grpc.ServiceRegistrar, srv CSATServer) {
	s.RegisterService(&CSAT_ServiceDesc, srv)
}

func _CSAT_GetPolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATServer).GetPolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CSAT_GetPolls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATServer).GetPolls(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSAT_CreatePollRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePollRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATServer).CreatePollRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CSAT_CreatePollRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATServer).CreatePollRate(ctx, req.(*CreatePollRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CSAT_ServiceDesc is the grpc.ServiceDesc for CSAT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSAT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.CSAT",
	HandlerType: (*CSATServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolls",
			Handler:    _CSAT_GetPolls_Handler,
		},
		{
			MethodName: "CreatePollRate",
			Handler:    _CSAT_CreatePollRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csat.proto",
}
