// Code generated by MockGen. DO NOT EDIT.
// Source: profile.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2024_1_FullFocus/microservices/profile/models"
	gomock "github.com/golang/mock/gomock"
)

// MockProfile is a mock of Profile interface.
type MockProfile struct {
	ctrl     *gomock.Controller
	recorder *MockProfileMockRecorder
}

// MockProfileMockRecorder is the mock recorder for MockProfile.
type MockProfileMockRecorder struct {
	mock *MockProfile
}

// NewMockProfile creates a new mock instance.
func NewMockProfile(ctrl *gomock.Controller) *MockProfile {
	mock := &MockProfile{ctrl: ctrl}
	mock.recorder = &MockProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfile) EXPECT() *MockProfileMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockProfile) CreateProfile(ctx context.Context, profile models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", ctx, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfileMockRecorder) CreateProfile(ctx, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfile)(nil).CreateProfile), ctx, profile)
}

// DeleteAvatarByProfileID mocks base method.
func (m *MockProfile) DeleteAvatarByProfileID(ctx context.Context, uID uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAvatarByProfileID", ctx, uID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAvatarByProfileID indicates an expected call of DeleteAvatarByProfileID.
func (mr *MockProfileMockRecorder) DeleteAvatarByProfileID(ctx, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAvatarByProfileID", reflect.TypeOf((*MockProfile)(nil).DeleteAvatarByProfileID), ctx, uID)
}

// GetAvatarByProfileID mocks base method.
func (m *MockProfile) GetAvatarByProfileID(ctx context.Context, uID uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatarByProfileID", ctx, uID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatarByProfileID indicates an expected call of GetAvatarByProfileID.
func (mr *MockProfileMockRecorder) GetAvatarByProfileID(ctx, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatarByProfileID", reflect.TypeOf((*MockProfile)(nil).GetAvatarByProfileID), ctx, uID)
}

// GetProfile mocks base method.
func (m *MockProfile) GetProfile(ctx context.Context, uID uint) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, uID)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockProfileMockRecorder) GetProfile(ctx, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockProfile)(nil).GetProfile), ctx, uID)
}

// GetProfileMetaInfo mocks base method.
func (m *MockProfile) GetProfileMetaInfo(ctx context.Context, pID uint) (models.ProfileMetaInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileMetaInfo", ctx, pID)
	ret0, _ := ret[0].(models.ProfileMetaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileMetaInfo indicates an expected call of GetProfileMetaInfo.
func (mr *MockProfileMockRecorder) GetProfileMetaInfo(ctx, pID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileMetaInfo", reflect.TypeOf((*MockProfile)(nil).GetProfileMetaInfo), ctx, pID)
}

// GetProfileNamesAvatarsByIDs mocks base method.
func (m *MockProfile) GetProfileNamesAvatarsByIDs(ctx context.Context, pIDs []uint) ([]models.ProfileNameAvatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileNamesAvatarsByIDs", ctx, pIDs)
	ret0, _ := ret[0].([]models.ProfileNameAvatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileNamesAvatarsByIDs indicates an expected call of GetProfileNamesAvatarsByIDs.
func (mr *MockProfileMockRecorder) GetProfileNamesAvatarsByIDs(ctx, pIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileNamesAvatarsByIDs", reflect.TypeOf((*MockProfile)(nil).GetProfileNamesAvatarsByIDs), ctx, pIDs)
}

// GetProfileNamesByIDs mocks base method.
func (m *MockProfile) GetProfileNamesByIDs(ctx context.Context, pIDs []uint) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileNamesByIDs", ctx, pIDs)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileNamesByIDs indicates an expected call of GetProfileNamesByIDs.
func (mr *MockProfileMockRecorder) GetProfileNamesByIDs(ctx, pIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileNamesByIDs", reflect.TypeOf((*MockProfile)(nil).GetProfileNamesByIDs), ctx, pIDs)
}

// UpdateAvatarByProfileID mocks base method.
func (m *MockProfile) UpdateAvatarByProfileID(ctx context.Context, uID uint, imgSrc string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatarByProfileID", ctx, uID, imgSrc)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAvatarByProfileID indicates an expected call of UpdateAvatarByProfileID.
func (mr *MockProfileMockRecorder) UpdateAvatarByProfileID(ctx, uID, imgSrc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatarByProfileID", reflect.TypeOf((*MockProfile)(nil).UpdateAvatarByProfileID), ctx, uID, imgSrc)
}

// UpdateProfile mocks base method.
func (m *MockProfile) UpdateProfile(ctx context.Context, uID uint, profileNew models.ProfileUpdateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, uID, profileNew)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockProfileMockRecorder) UpdateProfile(ctx, uID, profileNew interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfile)(nil).UpdateProfile), ctx, uID, profileNew)
}
